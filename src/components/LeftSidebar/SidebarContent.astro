---
import { getLanguageFromURL, getVersionFromURL, removeSubpageSegment } from '../../util';
import MenuIcon from './MenuIcon';

export interface Props {
	type: TabType;
	defaultActiveTab: TabType;
	sidebarSections: Array<{
		text: string;
		type: TabType;
		children: Array<{ text: string; slug: string; isFallback?: boolean }>;
	}>;
	currentPageMatch: string;
}
type TabType = 'learn' | 'api';

const { type, defaultActiveTab, sidebarSections, currentPageMatch } = Astro.props as Props;
const lang = getLanguageFromURL(Astro.url.pathname);
const version = getVersionFromURL(Astro.url.pathname);
let urlVersion = (version) ? `v${version}/` : ""

const categoryLinkPrefix = `/${lang}/${urlVersion}`
const currentPageNoLangNoVer = currentPageMatch.replace(lang + "/", "").replace(urlVersion, "") + "/"
//console.log(currentPageNoLangNoVer)
---

{
	sidebarSections.map((section) => (
		<li class:list={['nav-group', type, defaultActiveTab === type && 'active', section.extraCSSClasses]} >
			<details>
				<summary class:list={["nav-group-title", "flex", "justify-between", "items-center", (currentPageNoLangNoVer.indexOf(section.slug) == 0) && "active"]}>
					<a href={categoryLinkPrefix + section.slug} class="flex-1"> 
						<h2 class="hover:no-underline">
						<span class="icon-text-combo">
							<MenuIcon icon={section.icon} />
								<span>{section.text}</span>
							
						</span>
						</h2>
					</a>
						{
							!section.hideChevron && (
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="chevron bi bi-chevron-right" viewBox="0 0 16 16">
  <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
</svg>

						)}
					
				</summary>
				<ul>
					{section.children.map(({ slug, text, isFallback }) => (
						<li class="nav-link">
							<a
								href={`${Astro.site?.pathname}${lang}/${urlVersion}${slug}/`}
								aria-current={`${currentPageMatch.endsWith(slug) ? 'page' : 'false'}`}
								data-current-parent={`${
									removeSubpageSegment(currentPageMatch).endsWith(removeSubpageSegment(slug))
										? 'true'
										: 'false'
								}`}
							>
								<Fragment set:html={text} /> {isFallback && <sup class="fallback">EN</sup>}
							</a>
						</li>
					))}
				</ul>
			</details>
		</li>
	))
}

<style lang="scss">
	
	.nav-group {
		margin-bottom: 1rem;
	}
	.nav-group .placeholder {
		opacity: 0.6;
		text-align: center;
		display: block;
	}

	.nav-link a:hover {
    background: var(--theme-gray-opacity);
	border-radius: var(--theme-border-radius);
	}
	
	@media (max-width: 50em) {
		.sm-hidden {
			display: none !important;
		}
	}
	@media (min-width: 50em) {
		.nav-group {
			display: none;
			margin-bottom: 1rem;
		}
	}
	.nav-group.active {
		display: block;
	}
	.nav-group-title {
		padding: 0.3rem 2rem;
		font-size: 1em;
	}
	.nav-group-title a{
		font-weight: 600;
		color: var(--theme-readable-grey);
		text-decoration: none;
	}
	.nav-link a {
		margin: 1px;
		padding: 0.3rem 2rem;
		font: inherit;
		color: var(--theme-readable-grey);
		text-decoration: none;
		display: block;
		position: relative;

		&:hover,
		&:focus {
			color: inherit;
			text-decoration: underline;
		}

		&[aria-current='page'],
		&[data-current-parent='true'] {
			color: var(--theme-accent-full) !important;
			font-weight: 600;
			background-color: var(--theme-gray-opacity);
			border-radius: 4px;
			/* Indicates the current page for forced colors users in older browsers */
			outline: 1px solid transparent;
			&:focus {
				outline: 2px solid transparent;
			}
		}

		@media (forced-colors: active) {
			&[aria-current='page'],
			&[data-current-parent='true'] {
				border: 1px solid LinkText;
			}
		}
	}

	@media (min-width: 50em) {
		.nav-group-title,
		.nav-group-title{
			border-radius: var(--theme-border-radius);
		}

		/*details[open] .nav-group-title {
			background-color: var(--theme-accent-opacity);
		}
		*/
		.nav-group-title.active {
			background-color: var(--theme-accent-opacity);
		}


		details .nav-group-title:hover{
			background-color: var(--theme-accent-opacity);
		}

		
	}

	@media (min-width:64em) {
		.nav-link a, .nav-group-title{
			padding: 0.2rem .5rem;
		}
	}

	:global(:root.theme-dark) .nav-link a[aria-current='page'],
	:global(:root.theme-dark) .nav-link a[data-current-parent='true'] {
		color: hsla(var(--color-base-white), 100%, 1);
	}

	.fallback {
		font-size: 0.75em;
		line-height: 1;
		font-weight: bold;
		color: var(--theme-text-light);
		display: none;
	}

	details > summary {
		list-style: none;
	}

	details > summary::marker,
	details > summary::-webkit-details-marker {
		display: none;
	}

	details[open] > summary svg.chevron {
		transform: rotate(90deg);
	}

	summary {
		cursor: pointer;
	}

	summary h2 {
		all: inherit;
		margin: 0;
		padding: 0;
		display: flex;
		justify-content: space-between;
		font-size: var(--theme-text-sm);
		align-items: center;
		background-color: transparent;
		text-transform: uppercase;
	}

	svg {
		transform: rotate(0);
		transition: 0.15s transform ease;
		vertical-align: middle;
	}

	:global([dir='rtl']) svg {
		transform: rotate(180deg);
	}

	svg path {
		fill: currentColor;
	}
</style>
